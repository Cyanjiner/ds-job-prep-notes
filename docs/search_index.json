[["index.html", "DS Intern/NG Job Application Prep Notes Chapter 1 Summary resources for DS learning 1.1 Statistics, Probability, and A/B Testing 1.2 SQL / R / Python / Visualization Tools 1.3 Machine Learning resources 1.4 Interview Questions &amp; Resume", " DS Intern/NG Job Application Prep Notes Jiner Zheng 2022-09-01 Chapter 1 Summary resources for DS learning 1.1 Statistics, Probability, and A/B Testing Introduction to A/B Testing by Google on Coursera 1.2 SQL / R / Python / Visualization Tools SQL syntax guide: SQL ZOO, W3schools SQL classes: Udemy: SQL-MySQL for Data Analytics and Business Intelligence + The Ultimate MySQL Bootcamp (should take less than a week to learn these two courses) Other resources: 18 BEST SQL online learning resources SQL Practices: Hackerrank (easy), Summary of SQL in LeetCode (go for medium and hard!!) MySQL instructions on Windows function &amp; Frame Clause, WITH common table expression (very useful) Udemy Python courses: Data Analysis with Pandas and Python + Python for Data Science and Machine Learning Bootcamp (tip: if you are familiar with Python then I recommend directly taking Andrew Ng’s ML courses and practice ur python ds coding thru hands-on projects and also regularly checking the Complete python data science cheatsheets) R: Datacamp (for learning how to program in R. However, most tech companies prefer Python so no need to be an R expert, but it is good to learn especially if you are also interested in doing research in academic) Tableau / Power BI: Learning Path: Your Guide to become a Tableau Expert | Tableau Tutorial | Power BI Tutorial (looking at online tutorial guides are sufficient for learning data viz tools cuz they are easy, but if you prefer taking online video lessons then Coursera—Data Visualization and Communication with Tableau by Duke will be a good choice). Other helpful resources: The R Gallery (website that contains useful R visualizations examples and code) R Markdown Guide (should be helpful to learn Rmd too cuz it makes everything look pretty) Collection of RStudio Cheatsheets (a collection of cheat sheets for all common used data manipulation and visualization packages (e.g. ggplot2, dplyr, tidyr, stringr, lubridate, shiny, etc.) R Statistical Modeling Code Syntax Guide Python Data Science Cheat Sheet (Beginner) Python Data Science Cheat Sheet (PDF) (Collection of popular python libraries cheat sheets including Numpy, Pandas, Seaborn, Matplotlib, Scikit, SciPy - linear algrebra) Real Python Tutorials 1.3 Machine Learning resources Machine Learning Specialization by Andrew Ng on Coursera Topics covered: Supervised Learning: multiple linear regression, logistic regression, neural networks, &amp; decision trees) Unsupervised Learning: clustering, dimensionality reduction, recommender systems Some AI &amp; ML innovation: evaluating and tuning models, taking a data-centric approach to improving performance Applied Learning Project: Build ML models using Numpy &amp; Scikit Build &amp; train a neural network with Tensorflow to perform multi-class classificaton Build &amp; use decision trees and tree ensemble methods, including forest and boosted trees Build recommender systems with a collaborative filtering approach and a content-based deep learning method 15 hours of expert ML videos. 《An Introduction to Statistical Learning》 Machine Learning 101 on Towards Data Science and many other articles Other useful resources (notes): Data Science Specialization Course Notes (Notes for all 9 courses in Coursera Data Science Specialization from JHU, taken by Xing —&gt; topics include Experimental Design / EDA / Statistical Inferences / Regression models / Practical Machine Learning, etc.) Natural Language Processing Notes – Python (chapters from Python Notes for Linguistics by Alvin Chen). Data Science with R: A Resource Compendium very very very complete collection of data science resources with R by Martin Monkman, ranging from topics like data wrangling, Bayesian methods, to time series modeling &amp; ML methods) Additional Tips: All resources listed as other useful resources are mainly for your references when you need to actually implement certain methods / conduct a project / or to review certain syntax or concept. I personally DO NOT recommend beginners to start their learning journey with these resources, because it is much more important that you have already built a SOLID foundation in all fields mentioned above through SYSTEMATIC learning processes. 1.4 Interview Questions &amp; Resume MIT Sample Resumes VMock Dashboard (A smart platform that rates &amp; analyzes your resume) FAANGPath Resume Template (a FREE tech resume template built with LaTeX on Overleaf) DS Interview related GitHub respository: Data-Science-Interview-Resources | 120-Data-Science-Interview-Questions Cracking-the-data-science-interview(this one contains almost ALL related resources for DS job prepraration, but it might be overwhelming if you just start your DS-prep journey [a lot of cheat sheets on KEY topics/concepts, so I recommend selectively using some resources there). "],["statistics-and-probability.html", "Chapter 2 Statistics and Probability", " Chapter 2 Statistics and Probability "],["ab-testing.html", "Chapter 3 A/B Testing 3.1 What is A/B testing? 3.2 What you can’t do with A/B testing? 3.3 Example: Audacity", " Chapter 3 A/B Testing Experimentation ranging from the underlying infrastructure, to design metrics and dashboards, to running and analyzing experiments to the processing culture needed to facilitate data-driven solutions 3.1 What is A/B testing? A/B testing is a general methodology used online when you wanna test out a new product or a feature. And what you’re doing is you are going to take two sets of users and you will show one set, a control set, your existing product or feature, and then another set, your experiment, the new version. Then, you will examine how did these users from two groups respond differently in order to determine which version of your feature is better. Example: It can be a novel big change or addition in product or feature like when Amazon initially decided to launch their first personalized product recommendations feature based on A/B testing results that showed a huge increase in revenue by adding this new feature. It can also be a very small or trivial feature such as when Google tested 41 different shades of blue. The key thing in A/B testing is that you have a consistent response from your control and experiment group so that you can actually determine and structure the experiment to determine whether there is a significant behavior change in your experiment group. The goal in A/B testing is to design an experiment that is gonna be robust and give you repeatable results so that you can actually make a good decision about whether or not to actually launch that product or feature. A/B Testing compared to hypothesis testing in traditional fields of study: In traditional fields of study such as clinical trials in psychology or medical research, we know a lot of information about participants such as their demographics, and we usually have a relatively small number of participants. However, when testing an online product, we might have millions of users, hundreds or thousands of clicks, etc., and we DO NOT know much about who is taking those actions on the other end. 3.2 What you can’t do with A/B testing? Case 1: New Experiences (e.g. premium service that offers additional functionality) (p.s. to access premium, user need to upgrade, create a log-in, and explore new functionality) A/B testing isn’t useful when you wanna test out new experiences. Because when you are testing a new experience, you have an existing set of users and they might feel that you have changed their experience and they preferred their old way (and this is change aversion). The other case is that they can be really like this new experience and they test out everything (this is called a novelty effect). What happens in a new experience are two issues: we are not sure about the baseline for comparison we can’t control the exact time we need in order to actually have our users adapt to the new experience. So that we can’t know the plateaued experience so that we can actually make a robust decision. Case 2: Time-dependent/related cases (e.g. Referral) For example, if we have a website that recommends apartment rentals, but people don’t look for apartments that often, what you really want is to grow your business by referrals to other people who like your service. The main issues in this case are: The scope of an experiment will be really hard to measure whether people actually come back to you from more referrals or from other reasons. We can’t estimate the time that people actually spend in making the action of referral happen. Cases 3: Missing/Complete content or services A/B testing can’t really tell us if we are missing something. For example, if we are building a song or a book reviews website, A/B testing can’t tell us if we are missing the entire other book that we should be reviewing but we aren’t reviewing at all. Other Techniques to complement A/B testing: Qualitative research: A/B testing can give you a lot of broad quantitative data, but other techniques give you very deep and qualitative data that are really complimentary to A/B testing User experience research Focus groups and surveys Human evaluations Quantitative approach: We can also analyze the logs of what users did on the website to see if a hypothesis can be developed about what’s causing changes in their behavior. And that’s something where you may want to go forward and actually design and randomize an experiment through a perspective analysis. We can use the two data sources to compliment each other. 3.3 Example: Audacity 3.3.1 Defining the hypothesis Initial Hypothesis: changing the “start now” button from orange to pink will increase how many students explore Audacity’s courses. Choosing Metrics: BAD CHOICES: Total # of courses completed —&gt; time issue (not should about the actual duration to complete course) # of clicks —&gt; percentage issue (e.g. 2/12 clicks in control group vs. 1/3 clicks in experiment group: # of clicks in experiment is \\(\\downarrow\\), but its ratio is actually \\(\\uparrow\\) GOOD CHOICES: \\[\\begin{equation} \\text{CTR (click-through-rate)} = \\frac{\\text{Number of clicks}}{\\text{Number of Page views}} \\end{equation}\\] \\[\\begin{equation} \\text{Click-through probability)} = \\frac{\\text{Unique visitors who click}}{\\text{Unique visitors to page}} \\end{equation}\\] Updated hypothesis: Changing the “Start Now” button from orange to pink will increase the click-through-probability of the button. (--&gt; assume that this will ultimately increase business profits). "],["machine-learning-models.html", "Chapter 4 Machine Learning Models", " Chapter 4 Machine Learning Models "],["product-sense.html", "Chapter 5 Product Sense", " Chapter 5 Product Sense "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
